{"version":3,"file":"components-Modal-Modal-stories-mdx.42540c33.iframe.bundle.js","mappings":";;AAqCA;AACA;AACA;AA/BA;AAoIA;AAnIA;;AAuIA;AAxIA;AA0IA;AAxIA;;AA4IA;AA9IA;AAgJA;AA7IA;;AAiJA;AC7FA;AACA;;AAEA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;;;AAGA;;;AC1DA;;;AAIA;AAUA;AAKA;AACA;AACA;;;AAKA;AACA;AACA;;AAIA;AAuBA;AACA;AAuHA;AACA;;;;;ACjIA","sources":["webpack://@lokalise/louis/./src/components/Modal/styles.ts","webpack://@lokalise/louis/./src/components/DatePicker/styles.ts","webpack://@lokalise/louis/./src/components/Select/styles.ts","webpack://@lokalise/louis/./src/components/Toast/styles.ts"],"sourcesContent":["import { css, modifier, styled, variants } from '@lokalise/styled';\n\nimport type { ModalProps } from './Modal';\nimport { spacing, typography, value } from '../../utils/theme';\n\nexport type ModalSize = 'default' | 'wide';\n\nconst defaultSpacing = 6;\nconst doublePadding = 24;\nconst smallWidth = 320;\nconst wideWidth = 840;\nconst defaultWidth = 640;\n\ntype DialogProps = {\n\t$size?: ModalSize;\n\t$overflow?: ModalProps['overflow'];\n};\n\nexport const Header = styled.header`\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: flex-start;\n\tpadding: ${spacing(defaultSpacing)};\n`;\n\nexport const Title = styled.h2`\n\t${typography('heading.4')}\n\tcolor: ${value('color.text.default')};\n\twidth: 100%;\n\tmargin: 0;\n`;\n\nexport const Main = styled.div<{ $isOverflow: boolean }>`\n\t${modifier(\n\t\t'$isOverflow',\n\t\tcss`\n\t\t\tbox-shadow:\n\t\t\t\t0 1px 0 0 ${value('color.border.light')},\n\t\t\t\t0 -1px 0 0 ${value('color.border.light')};\n\t\t`,\n\t)}\n\n\tpadding: ${spacing(0, defaultSpacing, defaultSpacing, defaultSpacing)};\n`;\n\nexport const Footer = styled.footer`\n\tdisplay: flex;\n\tjustify-content: flex-end;\n\tgap: ${spacing(2)};\n\tpadding: ${spacing(defaultSpacing, defaultSpacing, defaultSpacing, defaultSpacing)};\n`;\n\nexport const Content = styled.div<{ $scrollbarWidth: number }>`\n\t/*\n\t* Section should be scrollable only when Footer is present. In Expert (lokalise-main) Modal grows as high\n\t* as it needs and when it gets higher than viewport body becomes scrollable. In order to not break this behavior\n\t* and have backwards compatability we can detect if the Footer and Main is present and only then make Main\n\t* scrollable. Hawing modal scrollable without footer probably would be wierd.\n\t*/\n\n\t// \":has\" is not supported in Firefox - fall back to default Modal scroll.\n\t&:has(${Footer}) {\n\t\t// Handle an edge case on small screens - if screen height is too small fall back to default Modal scroll.\n\t\t@media (min-height: 400px) {\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\n\t\t\tmax-height: calc(100vh - ${spacing(3)} * 2);\n\n\t\t\t@media (min-width: 768px) {\n\t\t\t\tmax-height: calc(100vh - ${spacing(7)} * 2);\n\t\t\t}\n\t\t}\n\t}\n\n\t&:has(${Footer}) ${Main} {\n\t\t@media (min-height: 400px) {\n\t\t\toverflow-y: auto;\n\t\t\tscrollbar-gutter: stable; // Adds padding in a width of a scrollbar even when the scrollbar is not present which fixes the issue with shifting content.\n\t\t\tpadding: ${spacing(defaultSpacing)};\n\n\t\t\t/*\n\t\t\t* \"scrollbar-gutter\" are not supported on Safari. There the layout will shift to the right if scrollbar will\n\t\t\t* be present. It is possible to determine overflow by JS, but in case there is a shift to or from this\n\t\t\t* \"overflow\" state, content jumps for a split second. It happens because time passes between the appearance\n\t\t\t* of scrollbar and the time it takes to add/remove CSS and recalculate layout.\n\t\t\t*/\n\t\t\t@supports (scrollbar-gutter: stable) {\n\t\t\t\t// Subtract padding added by \"scrollbar-gutter\".\n\t\t\t\tpadding-right: calc(${spacing(defaultSpacing)} - ${(props) => props.$scrollbarWidth}px);\n\t\t\t}\n\t\t}\n\t}\n`;\n\nexport const Actions = styled.div`\n\tdisplay: flex;\n\tjustify-content: flex-end;\n\tgap: ${spacing(2)};\n\tpadding-top: ${spacing(6)};\n\n\t@media (min-width: 768px) {\n\t\tpadding-top: ${spacing(7)};\n\t}\n`;\n\nexport const DialogOverlay = styled.div`\n\tbackground: rgba(0, 0, 0, 0.5);\n\tposition: fixed;\n\ttop: 0;\n\tright: 0;\n\tbottom: 0;\n\tleft: 0;\n\toverflow: auto;\n\tz-index: ${value('zIndex.modal')};\n`;\n\nexport const StyledDialog = styled.dialog<DialogProps>`\n\tbackground-color: ${value('color.background.surface.default')};\n\tborder-radius: ${value('radius.modal')};\n\tborder: none;\n\tbox-sizing: border-box;\n\t${typography('body.small.default')}\n\tcolor: ${value('color.text.default')};\n\tmargin: revert; // ensure that browser can determine the correct margins to position the dialog\n\tmargin-top: ${spacing(3)};\n\tpadding: 0;\n\toverflow: ${({ $overflow }) => $overflow};\n\n\t@media (min-width: 768px) {\n\t\tmargin-top: ${spacing(7)};\n\t}\n\n\twidth: 100%;\n\n\t${variants(\n\t\t'$size',\n\t\t{\n\t\t\tsmall: css`\n\t\t\t\tmax-width: calc(100% - ${doublePadding}px);\n\t\t\t\t@media (min-width: ${smallWidth + doublePadding}px) {\n\t\t\t\t\tmax-width: ${smallWidth}px;\n\t\t\t\t}\n\t\t\t`,\n\t\t\twide: css`\n\t\t\t\tmax-width: calc(100% - ${doublePadding}px);\n\t\t\t\t@media (min-width: ${wideWidth + doublePadding}px) {\n\t\t\t\t\tmax-width: ${wideWidth}px;\n\t\t\t\t}\n\t\t\t`,\n\t\t\tdefault: css`\n\t\t\t\tmax-width: calc(100% - ${doublePadding}px);\n\t\t\t\t@media (min-width: ${defaultWidth + doublePadding}px) {\n\t\t\t\t\tmax-width: ${defaultWidth}px;\n\t\t\t\t}\n\t\t\t`,\n\t\t},\n\t\t'default',\n\t)}\n`;\n","import { css, excludeProps, styled } from '@lokalise/styled';\n\nimport { withInputErrorModifier } from '../../utils/styles';\nimport { spacing, typography, value } from '../../utils/theme';\n\nexport const Container = styled.div`\n\tposition: relative;\n\twidth: 100%;\n\tdisplay: grid;\n\tgap: 4px;\n`;\n\nexport const IconWrapper = styled.div`\n\tbackground-color: ${value('color.background.surface.middle')};\n\tcolor: ${value('color.text.input.placeholder')};\n\twidth: 36px;\n\tborder-left: 1px solid ${value('color.border.input.default')};\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tposition: absolute;\n\tright: 0;\n\theight: 100%;\n\ttop: 0;\n\ttransition:\n\t\tborder-color ${value('motion.speed.1')},\n\t\tbackground-color ${value('motion.speed.1')},\n\t\tcolor ${value('motion.speed.1')};\n`;\n\ntype DateBoxProps = {\n\topened: boolean;\n\terror?: boolean;\n};\n\nexport const DateBox = styled.button\n\t.attrs({\n\t\ttype: 'button',\n\t})\n\t.withConfig({ shouldForwardProp: excludeProps(['opened', 'error']) })<DateBoxProps>`\n\t${typography('body.small.default')};\n\tborder: 1px solid ${value('color.border.input.default')};\n\theight: ${value('size.height.input.default')};\n\twidth: fit-content;\n\tcolor: ${value('color.text.default')};\n\tpadding: ${spacing(1, 3)};\n\tpadding-right: ${spacing(8)};\n\tborder-radius: ${value('radius.input')};\n\toverflow: hidden;\n\tbackground-color: ${value('color.background.input.default')};\n\tposition: relative;\n\talign-items: center;\n\ttext-align: left;\n\ttransition: border-color ${value('motion.speed.1')};\n\tcursor: pointer;\n\t&:focus-visible {\n\t\toutline: none; // use hover styles\n\t}\n\n\t// condition to avoid hover overriding style when opened\n\t${({ opened }) =>\n\t\topened\n\t\t\t? css`\n\t\t\t\t\tborder-color: ${value('color.border.active')};\n\t\t\t\t\tcolor: ${value('color.text.default')};\n\n\t\t\t\t\t${IconWrapper} {\n\t\t\t\t\t\tborder-color: ${value('color.border.active')};\n\t\t\t\t\t\tcolor: ${value('color.text.default')};\n\t\t\t\t\t}\n\t\t\t\t`\n\t\t\t: css`\n\t\t\t\t\t&:hover {\n\t\t\t\t\t\tborder-color: ${value('color.border.input.hover')};\n\n\t\t\t\t\t\t${IconWrapper} {\n\t\t\t\t\t\t\tborder-color: ${value('color.border.input.hover')};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t`}\n\n\t${withInputErrorModifier}\n`;\n\nexport const DrawerContent = styled.div`\n\tmargin: ${spacing(4)};\n`;\n\nexport const Placeholder = styled.span`\n\t${typography('body.small.default')}\n\tcolor: ${value('color.text.input.placeholder')};\n`;\n\nexport const DateBoxLabel = styled.span`\n\tpadding-right: ${spacing(2)};\n\twhite-space: nowrap;\n`;\n","import { css, excludeProps, modifier, styled } from '@lokalise/styled';\nimport type { Ref } from 'react';\nimport Select from 'react-select';\nimport type { GroupBase, OptionProps, SelectInstance, StylesConfig } from 'react-select';\n\nimport type { SelectProps } from './Select';\nimport { CloseIcon } from '../../foundations/icons';\nimport type { Theme } from '../../foundations/themes';\nimport {\n\toneLineEllipsis,\n\twithInputContainerStyle,\n\twithInputDisabledStyle,\n\twithInputFieldStyle,\n} from '../../utils/styles';\nimport { spacing, typography, value } from '../../utils/theme';\n\nexport const focusOutlineVisibilityClassName = 'LouisSelect-focus_outline_should_be_visible';\n\nconst multiValueLabel = css`\n\t// Padding is added, so MultiValueLabel Item text, could be seen in full size\n\tpadding: 1px;\n\tcolor: ${value('color.text.default')};\n\tfont-size: 14px;\n\tline-height: 15px;\n`;\nexport const MultiValueLabelText = styled.div.withConfig({\n\tshouldForwardProp: excludeProps(['disabled']),\n})<{ disabled: boolean }>`\n\t${oneLineEllipsis};\n\t${multiValueLabel};\n\tmax-width: 200px;\n\n\t${modifier(\n\t\t'disabled',\n\t\tcss`\n\t\t\tcolor: ${value('color.text.disabled')};\n\t\t`,\n\t)};\n`;\n\nconst multiValueContainer = css`\n\tbackground-color: ${value('color.background.surface.fore')};\n\tborder-radius: ${value('radius.m')};\n\tpadding: 1px;\n\tmargin: 0;\n`;\n\nconst multiValue = css`\n\t${multiValueContainer};\n\t${multiValueLabel};\n\tpadding: 5px;\n`;\n\nexport const MultiValueMore = styled.div`\n\t${multiValue}\n`;\n\nexport const MultiValueMoreTooltipContent = styled.div`\n\tmax-width: 200px;\n`;\n\nexport const StyledSelect = styled(Select)`\n\t${typography('body.small.default')};\n\twidth: 100%;\n\n\t.Select__option {\n\t\tfont-family: ${value('font.family.default')};\n\t}\n\n\t.Select__option--is-disabled {\n\t\tcolor: ${value('color.text.disabled')};\n\t\tcursor: not-allowed;\n\t}\n\n\t.Select__control {\n\t\t${() => /* stupid hack to get rid of some type errors */ css`\n\t\t\t${withInputContainerStyle}\n\t\t`};\n\t\theight: unset;\n\t\tline-height: unset;\n\t\tmin-height: ${value('size.height.input.default')};\n\t\tpadding: 0;\n\t}\n\t.Select__control--is-focused,\n    /* This second selector is required to make sure hover rule is not overriding focus */\n    .Select__control--is-focused:hover {\n\t\tborder-color: ${value('color.border.active')};\n\t\toutline: none;\n\t\tbox-shadow: none;\n\t}\n\t.Select__control--is-disabled {\n\t\t${withInputDisabledStyle};\n\n\t\t.Select__placeholder {\n\t\t\tcolor: ${value('color.text.disabled')};\n\t\t}\n\n\t\t.Select__single-value {\n\t\t\tcolor: ${value('color.text.disabled')};\n\t\t}\n\n\t\t.Select__multi-value__label {\n\t\t\tpadding: 2.5px 8px;\n\t\t}\n\t}\n\t.Select__multi-value {\n\t\t${multiValueContainer}\n\t}\n\n\t.Select__multi-value__remove svg {\n\t\tcolor: ${value('color.text.light.default')};\n\t\tfill: currentColor;\n\t\tcursor: pointer;\n\t}\n\t.Select__multi-value__remove:hover {\n\t\tbackground-color: transparent;\n\t\tsvg {\n\t\t\tbackground-color: transparent;\n\t\t\tcolor: ${value('color.text.link.hover')};\n\t\t}\n\t}\n\t.Select__multi-value__remove svg {\n\t\twidth: 16px;\n\t\theight: 16px;\n\t}\n\t.Select__menu-notice--no-options {\n\t\tfont-family: ${value('font.family.default')};\n\t}\n\t.Select__indicator {\n\t\tpadding: 6px 8px;\n\t}\n\t.Select__input-container {\n\t\toverflow: hidden;\n\t}\n\t&&& .Select__input {\n\t\tfont-size: 14px;\n\t\tline-height: 16px;\n\t\tcolor: ${value('color.text.default')};\n\n\t\t&:focus {\n\t\t\toutline: none !important;\n\t\t}\n\t}\n\t.Select__indicators {\n\t\tcolor: ${value('color.border.input.default')};\n\t}\n\t.Select__clear-indicator,\n\t.Select__dropdown-indicator,\n\t.Select__clear-indicator svg,\n\t.Select__dropdown-indicator svg {\n\t\tcursor: pointer;\n\t\tcolor: currentColor;\n\t\tfill: currentColor;\n\t}\n\t.Select__clear-indicator {\n\t\tpadding: 0px;\n\t\tmargin-right: 4px;\n\t\tfont-size: 16px;\n\t\theight: 16px;\n\t}\n\t.Select__dropdown-indicator {\n\t\tpadding: 0px 12px 0px 0px;\n\t\tfont-size: 24px;\n\t\theight: 24px;\n\t}\n\t&:not(.Select--is-disabled) {\n\t\t.Select__clear-indicator:hover {\n\t\t\tcolor: ${value('color.text.link.hover')};\n\t\t}\n\t\t&:hover,\n\t\t[data-dev-state='hover'] & {\n\t\t\t.Select__dropdown-indicator {\n\t\t\t\tcolor: ${value('color.border.input.hover')};\n\t\t\t}\n\t\t}\n\t\t[data-dev-state='focus'] & .Select__dropdown-indicator,\n\t\t.Select__control--menu-is-open .Select__dropdown-indicator {\n\t\t\ttransform: scaleY(-1);\n\t\t\tcolor: ${value('color.border.active')};\n\t\t}\n\t}\n\t.Select__placeholder,\n\t.Select__single-value {\n\t\tfont-size: 14px;\n\t\tpadding: 0;\n\t\tmargin: 0;\n\t\tcolor: ${value('color.text.input.placeholder')};\n\t}\n\t.Select__single-value {\n\t\tcolor: ${value('color.text.default')};\n\t}\n\t.Select__indicator-separator {\n\t\tdisplay: none;\n\t}\n\t.Select__value-container {\n\t\t${() => /* stupid hack to get rid of some type errors */ css`\n\t\t\t${withInputFieldStyle}\n\t\t`};\n\n\t\tpadding: 4px 12px;\n\t}\n\t.Select__value-container--is-multi {\n\t\tgap: ${spacing(1)};\n\t\tpadding: ${spacing(1, 2)};\n\t}\n` as <\n\tAsync extends boolean,\n\tCreatable extends boolean,\n\tOptionType,\n\tIsMulti extends boolean = false,\n\tGroupType extends GroupBase<OptionType> = GroupBase<OptionType>,\n>(\n\tprops: SelectProps<Async, Creatable, OptionType, IsMulti, GroupType> & {\n\t\tref?: Ref<SelectInstance>;\n\t},\n) => ReturnType<typeof Select>;\n\nexport const Container = styled.div`\n\twidth: 100%;\n\tdisplay: grid;\n\tgap: ${spacing(1)};\n\tgrid-template-columns: minmax(50px, 1fr); /* This ensures Select doesn't overflow 100% */\n\n\t&:has(.Select--is-disabled) {\n\t\tcursor: not-allowed;\n\t}\n\n\t// While using keyboard navigation, show active background on focused option\n\t&.${focusOutlineVisibilityClassName} .Select__option--is-focused {\n\t\tbackground-color: ${value('color.background.active')};\n\t}\n\n\t// While hovering, only show active background on hovered option, do not show active background on focused option\n\t&:not(.${focusOutlineVisibilityClassName}) .Select__menu:hover .Select__option:not(.Select__option--is-disabled) {\n\t\tbackground-color: ${value('color.background.input.default')};\n\t}\n\t&:not(.${focusOutlineVisibilityClassName}) .Select__menu .Select__option:hover:not(.Select__option--is-disabled) {\n\t\tbackground-color: ${value('color.background.active')};\n\t}\n`;\n\nexport const StyledCloseIcon = styled(CloseIcon)`\n\tpointer-events: inherit;\n\n\t* {\n\t\tpointer-events: inherit;\n\t}\n`;\n\nexport const RemoveButtonContainer = styled.div`\n\tdisplay: flex;\n`;\n\n/**\n * First of all, this is the recommended way to apply custom styling to react-select component. But it's quite\n * inconvenient for use because it's really hard to use our theme here. Reason we can't do\n * everything using styled components is because, when rendering menu using portal (which we need to do sometimes)\n * the parent class is lost and styles are not applied to the menu. So the solution is to style menu/options using\n * recommended solution (below) and everything else using styled components.\n */\nexport const selectStyles = (\n\ttheme: Theme,\n): StylesConfig<\n\tOptionProps & {\n\t\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\t\t__isNew__: boolean;\n\t}\n> => ({\n\tinput: (base) => ({\n\t\t...base,\n\t\tmargin: 0,\n\t\tcolor: value('color.text.default')({ theme }),\n\t\toverflow: 'hidden',\n\t}),\n\tmenu: (base) => ({\n\t\t...base,\n\t\tbackgroundColor: value('color.background.input.default')({ theme }),\n\t\tborder: `1px solid ${value('color.border.input.default')({ theme })}`,\n\t\tboxShadow: '0 0 5px rgba(0, 0, 0, 0.2)',\n\t\tmargin: spacing(1, 0, 0)({ theme }),\n\t\tzIndex: value('zIndex.dropdown')({ theme }),\n\t}),\n\tnoOptionsMessage: (base) => ({\n\t\t...base,\n\t\t...typography('body.small.default')({ theme }),\n\t\tcolor: value('color.text.disabled')({ theme }),\n\t\ttextAlign: 'left',\n\t}),\n\toption: (base, props) => ({\n\t\t...base,\n\t\tfontFamily: value('font.family.default')({ theme }),\n\t\tfontSize: '14px',\n\t\tlineHeight: '16px',\n\t\tpadding: '8px 14px 9px',\n\t\tcolor: value('color.text.default')({ theme }),\n\t\tcursor: 'pointer',\n\t\twhiteSpace: 'nowrap',\n\t\toverflow: 'hidden',\n\t\ttextOverflow: 'ellipsis',\n\t\twidth: '100%',\n\t\tminWidth: '100%',\n\t\t// eslint-disable-next-line no-underscore-dangle\n\t\t...(props.data.__isNew__ ? { color: value('color.text.active')({ theme }) } : {}),\n\t\t...(props.isSelected\n\t\t\t? {\n\t\t\t\t\tbackground: 'none',\n\t\t\t\t\tcolor: value('color.text.default')({ theme }),\n\t\t\t\t\t/**\n\t\t\t\t\t * For the selected option we originally were setting `display: flex` but combination of flex + text-overflow\n\t\t\t\t\t * was not working correctly. Instead, for the selected option, we instead have the icon to be positioned\n\t\t\t\t\t * absolutely and shift it left while simultaneously adding same amount of padding left to the selected option.\n\t\t\t\t\t *\n\t\t\t\t\t * 16px – icon width, 14px – original padding (above), 1 spacing – gap\n\t\t\t\t\t */\n\t\t\t\t\tpaddingLeft: `calc(16px + 14px + ${spacing(1)({ theme })})`,\n\t\t\t\t\t'&::before': {\n\t\t\t\t\t\twidth: 16,\n\t\t\t\t\t\theight: 16,\n\t\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\t\t// 16px icon width + 1 spacing\n\t\t\t\t\t\tmarginLeft: `calc(-16px - ${spacing(1)({ theme })})`,\n\t\t\t\t\t\tcontent: '\"\"',\n\t\t\t\t\t\tflex: '0 0 auto',\n\t\t\t\t\t\tverticalAlign: 'middle',\n\t\t\t\t\t\tbackgroundSize: '16px 16px',\n\t\t\t\t\t\tbackgroundRepeat: 'no-repeat',\n\t\t\t\t\t\tbackgroundPosition: 'center',\n\t\t\t\t\t\tbackgroundImage: `url(\"data:image/svg+xml,%3Csvg width='16' height='16' viewBox='0 0 16 16' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M6.64372 10.1336L3.58684 7.07669L2.65918 8.01319L6.65255 12.0066L12.9872 5.65427L12.0507 4.71777L6.64372 10.1336Z' fill='${encodeURIComponent(\n\t\t\t\t\t\t\tvalue('color.text.default')({ theme }),\n\t\t\t\t\t\t)}'/%3E%3C/svg%3E%0A\")`,\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t: undefined),\n\t\t...(props.isFocused\n\t\t\t? {\n\t\t\t\t\tbackground: value('color.background.active')({ theme }),\n\t\t\t\t\tcolor: value('color.text.default')({ theme }),\n\t\t\t\t}\n\t\t\t: undefined),\n\t}),\n\t// No access to props inside menuPortal\n\tmenuPortal: (base) => ({ ...base, zIndex: theme.zIndex.dropdownInPortal }),\n\tmenuList: (base, props) => ({ ...base, maxHeight: props.selectProps.maxMenuHeight }),\n\tvalueContainer: (base) => ({ ...base, overflow: 'hidden' }),\n});\n","import { css, excludeProps, modifier, styled } from '@lokalise/styled';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/ReactToastify.css';\n\nimport { spacing, typography, value } from '../../utils/theme';\nimport { IconButton } from '../IconButton';\nimport type { IconButtonProps } from '../IconButton';\nimport type { PressableProps } from '../Pressable';\nimport { Pressable } from '../Pressable';\n\nexport const CloseIconButton = styled(IconButton)<IconButtonProps>`\n\topacity: 0;\n\ttransition: opacity 0.2s;\n`;\n\nexport const TypeIcon = styled.div.withConfig({\n\tshouldForwardProp: excludeProps(['type']),\n})`\n\tflex-basis: 16px;\n\tflex-shrink: 0;\n\tflex-grow: 0;\n\theight: 20px;\n\tdisplay: flex;\n\talign-items: center;\n`;\n\nexport const Content = styled.div`\n\twidth: 100%;\n\tflex-shrink: 1;\n\tflex-grow: 1;\n\tdisplay: grid;\n\tgrid-template-columns: 1fr;\n\tgap: ${spacing(1)};\n`;\n\nexport const Title = styled.span`\n\t${typography('body.caption.strong')};\n\tdisplay: -webkit-box;\n\ttext-overflow: ellipsis;\n\t-webkit-line-clamp: 2;\n\t-webkit-box-orient: vertical;\n\tword-break: normal;\n\toverflow: hidden;\n`;\n\nexport const Description = styled.span`\n\t${typography('body.caption.default')};\n\tdisplay: -webkit-box;\n\ttext-overflow: ellipsis;\n\t-webkit-line-clamp: 8;\n\t-webkit-box-orient: vertical;\n\tword-break: normal;\n\toverflow: hidden;\n`;\n\nexport const ToastAnchor = styled(Pressable)<PressableProps>`\n\t${typography('body.link.caption')};\n\ttext-decoration: underline;\n\tcursor: pointer;\n\tcolor: ${value('color.text.default')};\n\n\t${modifier(\n\t\t({ href }: PressableProps) => !href,\n\t\tcss`\n\t\t\tbackground-color: transparent;\n\t\t\tborder: none;\n\t\t\tfont-family: inherit;\n\t\t\tpadding: 0;\n\t\t`,\n\t)}\n\n\t&:hover {\n\t\topacity: 0.7;\n\t}\n\ttransition: opacity ${value('motion.speed.1')};\n`;\n\nexport const StyledToastContainer = styled(ToastContainer)`\n\ttransform: translate3d(0, 0, 9999px);\n\tposition: fixed;\n\tfont-family: inherit;\n\twidth: 332px;\n\tmin-height: 44px;\n\tbox-sizing: border-box;\n\tpadding: 0;\n\n\t--toastify-color-light: ${value('color.text.default')};\n\t--toastify-color-dark: var(--toastify-color-light);\n\t--toastify-color-info: ${value('color.background.info')};\n\t--toastify-color-success: ${value('color.background.success')};\n\t--toastify-color-warning: ${value('color.background.warning')};\n\t--toastify-color-error: ${value('color.background.danger')};\n\t//--toastify-color-transparent: rgba(255, 255, 255, 0.7);\n\n\t--toastify-icon-color-info: ${value('color.text.info')};\n\t--toastify-icon-color-success: ${value('color.text.success')};\n\t--toastify-icon-color-warning: ${value('color.text.warning')};\n\t--toastify-icon-color-error: ${value('color.text.danger')};\n\n\t//--toastify-toast-width: 320px;\n\t//--toastify-toast-background: #fff;\n\t//--toastify-toast-min-height: 64px;\n\t//--toastify-toast-max-height: 800px;\n\t--toastify-font-family: ${value('font.family.default')};\n\t--toastify-z-index: ${value('zIndex.toast')};\n\n\t--toastify-text-color-light: ${value('color.text.default')};\n\t--toastify-text-color-dark: var(--toastify-text-color-light);\n\n\t--toastify-text-color-info: var(--toastify-text-color-light);\n\t--toastify-text-color-success: var(--toastify-text-color-light);\n\t--toastify-text-color-warning: var(--toastify-text-color-light);\n\t--toastify-text-color-error: var(--toastify-text-color-light);\n\n\t//--toastify-spinner-color: #616161;\n\t//--toastify-spinner-color-empty-area: #e0e0e0;\n\n\t// Used when no type is provided\n\t// toast(\"**hello**\")\n\t//--toastify-color-progress-light: linear-gradient(to right, #4cd964, #5ac8fa, #007aff, #34aadc, #5856d6, #ff2d55);\n\t// Used when no type is provided\n\t--toastify-color-progress-dark: var(--toastify-color-progress-light);\n\t--toastify-color-progress-info: var(--toastify-icon-color-info);\n\t--toastify-color-progress-success: var(--toastify-icon-color-success);\n\t--toastify-color-progress-warning: var(--toastify-icon-color-warning);\n\t--toastify-color-progress-error: var(--toastify-icon-color-error);\n\n\t.Toastify__toast {\n\t\tbox-sizing: border-box;\n\t\tpadding: ${spacing(3, 2)};\n\t\twidth: 100%;\n\t\tdisplay: flex;\n\t\talign-items: flex-start;\n\t\tcolor: ${value('color.text.default')};\n\t\tbox-shadow: none;\n\t\tcursor: default;\n\t\tmin-height: 44px;\n\t\toverflow: visible;\n\t\tborder-radius: ${value('radius.notification')};\n\t\tmargin-bottom: ${spacing(2)};\n\n\t\t&:hover ${CloseIconButton} {\n\t\t\topacity: 1;\n\t\t}\n\t}\n\n\t.Toastify__toast-icon {\n\t\tmargin: 0;\n\t}\n\n\t.Toastify__toast.Toastify__toast--success {\n\t\tbackground-color: var(--toastify-color-success);\n\n\t\t.Toastify__toast-icon {\n\t\t\tcolor: var(--toastify-icon-color-success);\n\t\t}\n\t}\n\n\t.Toastify__toast.Toastify__toast--error {\n\t\tbackground-color: var(--toastify-color-error);\n\n\t\t.Toastify__toast-icon {\n\t\t\tcolor: var(--toastify-icon-color-error);\n\t\t}\n\t}\n\n\t.Toastify__toast.Toastify__toast--warning {\n\t\tbackground-color: var(--toastify-color-warning);\n\n\t\t.Toastify__toast-icon {\n\t\t\tcolor: var(--toastify-icon-color-warning);\n\t\t}\n\t}\n\n\t.Toastify__toast.Toastify__toast--info {\n\t\tbackground-color: var(--toastify-color-info);\n\n\t\t.Toastify__toast-icon {\n\t\t\tcolor: var(--toastify-icon-color-info);\n\t\t}\n\t}\n\n\t.Toastify__toast-body {\n\t\twidth: 100%;\n\t\tdisplay: flex;\n\t\talign-items: flex-start;\n\t\tgap: ${spacing(2)};\n\t\tpadding: 0;\n\t}\n`;\n"],"names":[],"sourceRoot":""}